# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pI2TO4vclqEzraexmtwldE_R_r-JJEA7
"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

arr = np.array([1, 2, 3, 6, 4, 5])
print("Reversed:", arr[::-1])

array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
print("Flatten (method 1):", array1.flatten())
print("Flatten (method 2):", array1.ravel())

arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
print("Arrays equal:", np.array_equal(arr1, arr2))

x = np.array([1,2,3,4,5,1,2,1,1,1])
y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])
for arr in [x, y]:
    vals, counts = np.unique(arr, return_counts=True)
    max_val = vals[np.argmax(counts)]
    indices = np.where(arr == max_val)[0]
    print(f"Most frequent: {max_val}, Indices: {indices}")

gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
print("Total Sum:", gfg.sum())
print("Row-wise Sum:", np.sum(gfg, axis=1))
print("Column-wise Sum:", np.sum(gfg, axis=0))

n_array = np.array([[55, 25, 15], [30, 44, 2], [11, 45, 77]])
print("Diagonal sum:", np.trace(n_array))
eig_vals, eig_vecs = np.linalg.eig(n_array)
print("Eigenvalues:", eig_vals)
print("Eigenvectors:\n", eig_vecs)
print("Inverse:\n", np.linalg.inv(n_array))
print("Determinant:", np.linalg.det(n_array))

p1 = np.array([[1, 2], [2, 3]])
q1 = np.array([[4, 5], [6, 7]])
print("Mult 1:\n", np.dot(p1, q1))
print("Covariance 1:\n", np.cov(p1.T, q1.T))

p2 = np.array([[1, 2], [2, 3], [4, 5]])
q2 = np.array([[4, 5, 1], [6, 7, 2]])
print("Mult 2:\n", np.dot(p2, q2))
print("Covariance of p2:\n", np.cov(p2.T))
print("Covariance of q2:\n", np.cov(q2.T))

x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print("Inner product:", np.inner(x, y))
print("Outer product:\n", np.outer(x, y))
print("Cartesian product:\n", np.array(np.meshgrid(x.flatten(), y.flatten())).T.reshape(-1, 2))

array = np.array([[1, -2, 3], [-4, 5, -6]])
flat = array.flatten()
print("Absolute:\n", np.abs(array))
print("Percentiles (Flat):", np.percentile(flat, [25, 50, 75]))
print("Percentiles (Cols):", np.percentile(array, [25, 50, 75], axis=0))
print("Percentiles (Rows):", np.percentile(array, [25, 50, 75], axis=1))
print("Mean:", np.mean(flat), "Median:", np.median(flat), "Std:", np.std(flat))
print("Mean (Rows):", np.mean(array, axis=1))
print("Mean (Cols):", np.mean(array, axis=0))

a = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])
print("Floor:", np.floor(a))
print("Ceil:", np.ceil(a))
print("Trunc:", np.trunc(a))
print("Round:", np.round(a))

array = np.array([10, 52, 62, 16, 16, 54, 453])
print("Sorted:", np.sort(array))
print("Sorted Indices:", np.argsort(array))
print("4 smallest:", np.partition(array, 3)[:4])
print("5 largest:", np.sort(array)[-5:])

array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
ints = array[array == array.astype(int)]
floats = array[array != array.astype(int)]
print("Integers:", ints)
print("Floats:", floats)



def img_to_array(path):
    img = Image.open(path)
    img_array = np.array(img)
    if len(img_array.shape) == 2:
        np.savetxt("gray_image.txt", img_array, fmt='%d')
        print("Saved grayscale image array to gray_image.txt")
    else:
        np.savetxt("rgb_image.txt", img_array.reshape(-1, img_array.shape[-1]), fmt='%d')
        print("Saved RGB image array to rgb_image.txt")

def load_saved_file(path):
    data = np.loadtxt(path, dtype=int)
    print("Loaded data:\n", data)